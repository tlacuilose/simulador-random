/**
 * Result from a MClC generator.
 * @class ResultMCLC
 * @type {Object}
 * @property {Array.<Number>} randoms The random numbers generated.
 * @property {String} error Error description or null if no errors found.
 * @param {Array.<Number>} randoms The random numbers generated.
 * @param {String} error Error description or null if no errors found.
 * */
 function ResultMCLC(randoms, xone, xtwo, error) {
    this.randoms = randoms;
    this.xone = xone;
    this.xtwo = xtwo;
    this.error = error;
  }
  
  /**
   * Metodo Congruencial Lineal Combinado Generator.
   * @class Mcm
   * @type {Object}
   * @property {Array.<Number>} randoms The random numbers generated.
   * */
  function Mclc() {
    this._randoms = [];
    this._xone = [];
    this._xtwo = [];
  
    /**
     * Get randoms generated by the model.
     * @memberof Mclc
     * @returns {Array.<Number>} The last randoms generated by the model.
     * */
    this.getRandoms = function() {
        return this._randoms;
    }

    this.getXOne = function() {
        return this._xone;
    }

    this.getXTwo = function() {
        return this._xtwo;
    }
  
    /**
     * Generate random numbers for Metodo Congruencial Mixto.
     * @memberof Mclc
     * @param {Number} seed1 The seed 1.
     * @param {Number} seed2 The seed 2.
     * @param {Number} a1 Multiplier 1.
     * @param {Number} a2 Multiplier 2.
     * @param {Number} m1 Mod 1.
     * @param {Number} m2 Mod 2.
     * @param {Number} m Mod.
     * @param {Number} i Number of iterations.
     * @returns {ResultMCLC} All the generated random in the iterations.
     * */
    this.generate = function(seed1, seed2, a1, a2, m1, m2, m, i) {
      // There cant be a mod 0.
      if (m1 == 0 || m2 == 0 || m == 0) {
        return new ResultMCLC([],[],[],"ZeroModuleError");
      }
      if (m1<=a1 || m1<=seed1 || m2<=a2 || m2<=seed2){
        return new ResultMCLC([],[],[], "SmallerModuleError");
      }
      if (m1<0 || a1<0 || seed1<0 || i<0 || m2<0 || a2<0 || seed2<0){
        return new ResultMCLC([],[],[], "NegativeNumberError");
      }
      // Clear saved randoms.
      this._randoms = [];
      this._xone = [];
      this._xtwo = [];
  
      // Calculate mclc.
      let x1n = seed1;
      let x2n = seed2;
      let xn=0;
      let diff=0;
      for (let j = 0; j < i; j++) {
        x1n = (a1 * x1n) % m1
        x2n = (a2 * x2n) % m2
        diff = x1n - x2n
        if (diff>0){
            xn= diff % m
        }
        else{
            xn= (diff+m) % m
        }
        
        this._xone.push(x1n);
        this._xtwo.push(x2n);
        this._randoms.push(xn);
      }
      return new ResultMCLC(this._randoms, this._xone, this._xtwo,null);
    }
  
  }
  
  if (typeof module !== "undefined") {
    module.exports = Mclc;
  }
  