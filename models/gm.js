/**
 * Result from a GM generator.
 * @class ResultGM
 * @type {Object}
 * @property {Array.<Number>} randoms The random numbers generated.
 * @property {String} error Error description or null if no errors found.
 * @param {Array.<Number>} randoms The random numbers generated.
 * @param {String} error Error description or null if no errors found.
 * */
 function ResultGM(randoms, error) {
    this.randoms = randoms;
    this.error = error;
  }
  
  /**
   * Metodo Congruencial Mixto Generator.
   * @class Mcm
   * @type {Object}
   * @property {Array.<Number>} randoms The random numbers generated.
   * */
  function Gm() {
    this._randoms = [];
  
    /**
     * Get randoms generated by the model.
     * @memberof Gm
     * @returns {Array.<Number>} The last randoms generated by the model.
     * */
    this.getRandoms = function() {
      return this._randoms;
    }
  
    /**
     * Generate random numbers for Metodo Congruencial Mixto.
     * @memberof Gm
     * @param {Number} x0 The seed.
     * @param {Number} a Multiplier.
     * @param {Number} m Mod.
     * @param {Number} i Number of iterations.
     * @returns {ResultGM} All the generated random in the iterations.
     * */
    this.generate = function(x0, a, m, i) {
      // There cant be a mod 0.
      if (m == 0) {
        return new ResultGM([], "ZeroModuleError");
      }
      if (m<=a || m<=x0){
        return new ResultGM([], "SmallerModuleError");
      }
      if (m<0 || a<0 || x0<0 || i<0){
        return new ResultGM([], "NegativeNumberError");
      }
      // Clear saved randoms.
      this._randoms = [];
  
      // Calculate gm: Xi+1 = (aXi) mod m for i e N.
      let xn = x0;
      for (let j = 0; j < i; j++) {
        xn = (a * xn) % m
        this._randoms.push(xn);
      }
      return new ResultGM(this._randoms, null);
    }
  
  }
  
  if (typeof module !== "undefined") {
    module.exports = Gm;
  }
  